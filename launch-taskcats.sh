#!/usr/bin/env bash
# Bash template based on https://github.com/eppeters/bashtemplate.sh
# sudo chmod +x *.sh
# ./launch-taskcats.sh GH_BRANCH
set -euo pipefail
IFS=$'\n\t'

#/ Usage: launch-stack.sh MYNAME [TMPDIR] [S3_BUCKET] [SAM_STACK_NAME] [CFN_STACK_NAME] [PIPELINE_YAML]
#/ Description: Launch the Pipeline stack, which then continuously creates the
#/ app stack, to begin deployment of Lambda functions for Config Rules. 
#/ Examples:
#/  launch-stack.sh       (launches a stack using the the env var MYNAME, or shows you these docs if it is unset)
#/  launch-stack.sh eddie (launches a stack with buckets and stack names autogenerated based on the name "eddie")
#/ Options:
#/   --help: Display this help message
usage() { grep '^#/' "$0" | cut -c4- ; exit 1 ; }
expr "$*" : ".*--help" > /dev/null && usage

readonly LOG_FILE="/tmp/$(basename "$0").log"
info()    { echo "[INFO]    $@" | tee -a "$LOG_FILE" >&2 ; }
warning() { echo "[WARNING] $@" | tee -a "$LOG_FILE" >&2 ; }
error()   { echo "[ERROR]   $@" | tee -a "$LOG_FILE" >&2 ; }
fatal()   { echo "[FATAL]   $@" | tee -a "$LOG_FILE" >&2 ; exit 1 ; }

AWS_REGION=$(curl -s http://169.254.169.254/latest/meta-data/placement/availability-zone | sed 's/\(.*\)[a-z]/\1/')

GH_BRANCH=${1:-${GH_BRANCH:-}}
if [ -z "$GH_BRANCH" ]; then
    usage
fi

TMPDIR=${2:-.tmp-gitrepo}
UUID=${3:-taskcat}
S3BUCKET=${4:-$UUID}
# SAMSTACK is the app stack, whereas CFNSTACK is the pipeline stack
CFNSTACK=${6:-$UUID-pl}
PIPELINEYAML=${7:-pipeline-taskcat.yml}

cleanup() {
    sudo rm -rf $TMPDIR
}

if [[ "${BASH_SOURCE[0]}" = "$0" ]]; then
    trap cleanup EXIT
    sudo rm -rf $TMPDIR
    mkdir $TMPDIR
    cd $TMPDIR
    
    echo "Removing S3 buckets starting with $S3BUCKET that were previously used by this script"    
    aws s3api list-buckets --query 'Buckets[?starts_with(Name, `'$S3BUCKET'`) == `true`].[Name]' --output text | xargs -I {} aws s3 rb s3://{} --force
    
    info Sleeping for 20 seconds to ensure bucket removal has taken effect
    sleep 20
    
    array=( "ccoa" "ceoa")
    for j in "${array[@]}"
    do
    	echo $j
        info "Ensuring stack $CFNSTACK-$j-$GH_BRANCH is deleted"
        aws cloudformation delete-stack --stack-name $CFNSTACK-$j-$GH_BRANCH
        info "Waiting for stack $CFNSTACK-$j-$GH_BRANCH to delete"
        aws cloudformation wait stack-delete-complete --stack-name $CFNSTACK-$j-$GH_BRANCH
    done 
    
    array=( "aws-compliance-workshop" "aws-encryption-workshop")
    for i in "${array[@]}"
    do
    	echo $i
        info "Detecting which git protocol to use for our 'git clone' command"
        set +e
        if git --git-dir ../.git remote show origin  | grep Fetch | grep -i 'paulduvall/$i'; then
            # Use whatever git protocol the user prefers
            set -e
            clone_source="$(git --git-dir ../.git remote show origin  | grep Fetch | awk '{print $3;}')"
            git clone  -b $GH_BRANCH "$clone_source" $i
        else
            # Default to https
            set -e
            clone_source="https://github.com/PaulDuvall/$i.git"
        fi
        info "Cloning from $clone_source into $TMPDIR/$i-temp"
        rm -rf $i-temp
        git clone -b $GH_BRANCH "$clone_source" $i-temp
        cd $i-temp
        
        mkdir zipfiles
        cp $PIPELINEYAML zipfiles
        cd zipfiles
       
        info Creating the pipeline stack $CFNSTACK-ccoa-$GH_BRANCH
    aws cloudformation create-stack --stack-name $CFNSTACK-$i-$GH_BRANCH --capabilities CAPABILITY_NAMED_IAM --disable-rollback --template-body file://$PIPELINEYAML --parameters ParameterKey=GitHubBranch,ParameterValue=$GH_BRANCH
    done 

fi